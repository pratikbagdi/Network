Practical 8
Aim – To write a program to implement RSA Algorithm.

Theory –
RSA (Rivest-Shamir-Adleman) is one of the most widely used public-key cryptographic algorithms. It provides a method for secure communication by using a pair of keys: a public key and a private key. The public key is freely distributed, while the private key remains secret.

Key Generation:
    1.	Choose two large prime numbers, p and q. These numbers should be kept secret.
    2.	Calculate the modulus, n: n = p * q
    3.	Calculate Euler's totient function, φ(n): φ(n) = (p-1) * (q-1)
    4.	Choose an integer e, 1 < e < φ(n), such that gcd(e, φ(n)) = 1. This means e and φ(n) are relatively prime.
    5.	Calculate the private key, d: d ≡ e^-1 (mod φ(n)). This means d is the modular multiplicative inverse of e modulo φ(n).

Encryption:
To encrypt a message m:
    1.	Convert the message into a numerical representation (e.g., ASCII values).
    2.	Calculate the ciphertext c: c ≡ m^e (mod n)

Decryption:
To decrypt a ciphertext c:
    1.	Calculate the plaintext m: m ≡ c^d (mod n)
    2.	Convert the numerical representation back into the original message.

Security:
The security of RSA relies on the difficulty of factoring the modulus n into its prime factors p and q. This is a computationally intensive problem, even for large values of n. If an attacker could factor n, they could easily calculate the private key from the public key.

Applications:
RSA is used in various applications, including:
    •	Secure communication: For encrypting and decrypting messages.
    •	Digital signatures: For verifying the authenticity of digital documents.
    •	Public key infrastructure (PKI): For managing and distributing digital certificates.

Conclusion –
Hence, we have successfully implemented RSA algorithm.
